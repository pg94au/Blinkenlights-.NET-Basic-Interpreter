//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ../antlr/Basic.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Blinkenlights.Basic.Gen {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class BasicParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, VARNAME=28, QUOTED_STRING=29, STRING=30, 
		INT=31, WS=32, NEWLINE=33;
	public const int
		RULE_program = 0, RULE_line = 1, RULE_lineNum = 2, RULE_statement = 3, 
		RULE_endStatement = 4, RULE_forStatement = 5, RULE_gosubStatement = 6, 
		RULE_gotoStatement = 7, RULE_ifStatement = 8, RULE_inputStatement = 9, 
		RULE_letStatement = 10, RULE_nextStatement = 11, RULE_printStatement = 12, 
		RULE_returnStatement = 13, RULE_arg = 14, RULE_argSeparator = 15, RULE_expression = 16, 
		RULE_equation = 17;
	public static readonly string[] ruleNames = {
		"program", "line", "lineNum", "statement", "endStatement", "forStatement", 
		"gosubStatement", "gotoStatement", "ifStatement", "inputStatement", "letStatement", 
		"nextStatement", "printStatement", "returnStatement", "arg", "argSeparator", 
		"expression", "equation"
	};

	private static readonly string[] _LiteralNames = {
		null, "'END'", "'FOR'", "'='", "'TO'", "'GOSUB'", "'GOTO'", "'IF'", "'THEN'", 
		"'INPUT'", "'LET'", "'NEXT'", "'PRINT'", "'RETURN'", "','", "';'", "'*'", 
		"'/'", "'+'", "'-'", "'('", "')'", "'=='", "'!='", "'>'", "'<'", "'>='", 
		"'<='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "VARNAME", "QUOTED_STRING", "STRING", "INT", "WS", 
		"NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Basic.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BasicParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BasicParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BasicParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(BasicParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(BasicParser.NEWLINE, i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==INT || _la==NEWLINE) {
				{
				State = 40;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INT:
					{
					State = 36;
					line();
					State = 37;
					Match(NEWLINE);
					}
					break;
				case NEWLINE:
					{
					State = 39;
					Match(NEWLINE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 44;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineNumContext lineNum() {
			return GetRuleContext<LineNumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			lineNum();
			State = 46;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineNumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(BasicParser.INT, 0); }
		public LineNumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineNum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterLineNum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitLineNum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineNum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineNumContext lineNum() {
		LineNumContext _localctx = new LineNumContext(Context, State);
		EnterRule(_localctx, 4, RULE_lineNum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EndStatementContext endStatement() {
			return GetRuleContext<EndStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GosubStatementContext gosubStatement() {
			return GetRuleContext<GosubStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GotoStatementContext gotoStatement() {
			return GetRuleContext<GotoStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InputStatementContext inputStatement() {
			return GetRuleContext<InputStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LetStatementContext letStatement() {
			return GetRuleContext<LetStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NextStatementContext nextStatement() {
			return GetRuleContext<NextStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStatementContext printStatement() {
			return GetRuleContext<PrintStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			State = 60;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 50;
				endStatement();
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 51;
				forStatement();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 3);
				{
				State = 52;
				gosubStatement();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 4);
				{
				State = 53;
				gotoStatement();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 5);
				{
				State = 54;
				ifStatement();
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 6);
				{
				State = 55;
				inputStatement();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 7);
				{
				State = 56;
				letStatement();
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 8);
				{
				State = 57;
				nextStatement();
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 9);
				{
				State = 58;
				printStatement();
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 10);
				{
				State = 59;
				returnStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndStatementContext : ParserRuleContext {
		public EndStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterEndStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitEndStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndStatementContext endStatement() {
		EndStatementContext _localctx = new EndStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_endStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARNAME() { return GetToken(BasicParser.VARNAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(BasicParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(BasicParser.INT, i);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			Match(T__1);
			State = 65;
			Match(VARNAME);
			State = 66;
			Match(T__2);
			State = 67;
			Match(INT);
			State = 68;
			Match(T__3);
			State = 69;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GosubStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(BasicParser.INT, 0); }
		public GosubStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gosubStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterGosubStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitGosubStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGosubStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GosubStatementContext gosubStatement() {
		GosubStatementContext _localctx = new GosubStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_gosubStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			Match(T__4);
			State = 72;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(BasicParser.INT, 0); }
		public GotoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotoStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterGotoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitGotoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GotoStatementContext gotoStatement() {
		GotoStatementContext _localctx = new GotoStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_gotoStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			Match(T__5);
			State = 75;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EquationContext equation() {
			return GetRuleContext<EquationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(BasicParser.INT, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			Match(T__6);
			State = 78;
			equation();
			State = 79;
			Match(T__7);
			State = 80;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARNAME() { return GetToken(BasicParser.VARNAME, 0); }
		public InputStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterInputStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitInputStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputStatementContext inputStatement() {
		InputStatementContext _localctx = new InputStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_inputStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			Match(T__8);
			State = 83;
			Match(VARNAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARNAME() { return GetToken(BasicParser.VARNAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LetStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterLetStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitLetStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetStatementContext letStatement() {
		LetStatementContext _localctx = new LetStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_letStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			Match(T__9);
			State = 86;
			Match(VARNAME);
			State = 87;
			Match(T__2);
			State = 88;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NextStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARNAME() { return GetToken(BasicParser.VARNAME, 0); }
		public NextStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nextStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterNextStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitNextStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNextStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NextStatementContext nextStatement() {
		NextStatementContext _localctx = new NextStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_nextStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			Match(T__10);
			State = 91;
			Match(VARNAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext[] arg() {
			return GetRuleContexts<ArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgSeparatorContext[] argSeparator() {
			return GetRuleContexts<ArgSeparatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgSeparatorContext argSeparator(int i) {
			return GetRuleContext<ArgSeparatorContext>(i);
		}
		public PrintStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterPrintStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitPrintStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStatementContext printStatement() {
		PrintStatementContext _localctx = new PrintStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_printStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			Match(T__11);
			State = 94;
			arg();
			State = 100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__13 || _la==T__14) {
				{
				{
				State = 95;
				argSeparator();
				State = 96;
				arg();
				}
				}
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
	 
		public ArgContext() { }
		public virtual void CopyFrom(ArgContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrintVariableContext : ArgContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARNAME() { return GetToken(BasicParser.VARNAME, 0); }
		public PrintVariableContext(ArgContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterPrintVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitPrintVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrintQuotedStringContext : ArgContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTED_STRING() { return GetToken(BasicParser.QUOTED_STRING, 0); }
		public PrintQuotedStringContext(ArgContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterPrintQuotedString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitPrintQuotedString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintQuotedString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrintExpressionContext : ArgContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrintExpressionContext(ArgContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterPrintExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitPrintExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(Context, State);
		EnterRule(_localctx, 28, RULE_arg);
		try {
			State = 108;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new PrintQuotedStringContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 105;
				Match(QUOTED_STRING);
				}
				break;
			case 2:
				_localctx = new PrintExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 106;
				expression(0);
				}
				break;
			case 3:
				_localctx = new PrintVariableContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 107;
				Match(VARNAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgSeparatorContext : ParserRuleContext {
		public ArgSeparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argSeparator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterArgSeparator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitArgSeparator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgSeparator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgSeparatorContext argSeparator() {
		ArgSeparatorContext _localctx = new ArgSeparatorContext(Context, State);
		EnterRule(_localctx, 30, RULE_argSeparator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__14) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DivisionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DivisionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterDivision(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitDivision(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivision(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesesContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesesContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterParentheses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitParentheses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParentheses(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARNAME() { return GetToken(BasicParser.VARNAME, 0); }
		public VariableContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubtractionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SubtractionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterSubtraction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitSubtraction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtraction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicationContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplicationContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterMultiplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitMultiplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(BasicParser.INT, 0); }
		public ValueContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AdditionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterAddition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitAddition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 32;
		EnterRecursionRule(_localctx, 32, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				{
				_localctx = new ValueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 113;
				Match(INT);
				}
				break;
			case VARNAME:
				{
				_localctx = new VariableContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 114;
				Match(VARNAME);
				}
				break;
			case T__19:
				{
				_localctx = new ParenthesesContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 115;
				Match(T__19);
				State = 116;
				expression(0);
				State = 117;
				Match(T__20);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 135;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 133;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						_localctx = new MultiplicationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 121;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 122;
						Match(T__15);
						State = 123;
						expression(6);
						}
						break;
					case 2:
						{
						_localctx = new DivisionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 124;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 125;
						Match(T__16);
						State = 126;
						expression(5);
						}
						break;
					case 3:
						{
						_localctx = new AdditionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 127;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 128;
						Match(T__17);
						State = 129;
						expression(4);
						}
						break;
					case 4:
						{
						_localctx = new SubtractionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 130;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 131;
						Match(T__18);
						State = 132;
						expression(3);
						}
						break;
					}
					} 
				}
				State = 137;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EquationContext : ParserRuleContext {
		public EquationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equation; } }
	 
		public EquationContext() { }
		public virtual void CopyFrom(EquationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DoesNotEqualContext : EquationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DoesNotEqualContext(EquationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterDoesNotEqual(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitDoesNotEqual(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoesNotEqual(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualsContext : EquationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EqualsContext(EquationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterEquals(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitEquals(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquals(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LessThanContext : EquationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LessThanContext(EquationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterLessThan(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitLessThan(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessThan(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LessThanOrEqualContext : EquationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LessThanOrEqualContext(EquationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterLessThanOrEqual(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitLessThanOrEqual(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessThanOrEqual(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterThanContext : EquationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public GreaterThanContext(EquationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterGreaterThan(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitGreaterThan(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterThan(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterThanOrEqualContext : EquationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public GreaterThanOrEqualContext(EquationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterGreaterThanOrEqual(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitGreaterThanOrEqual(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterThanOrEqual(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EquationContext equation() {
		EquationContext _localctx = new EquationContext(Context, State);
		EnterRule(_localctx, 34, RULE_equation);
		try {
			State = 162;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				_localctx = new EqualsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 138;
				expression(0);
				State = 139;
				Match(T__21);
				State = 140;
				expression(0);
				}
				break;
			case 2:
				_localctx = new DoesNotEqualContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 142;
				expression(0);
				State = 143;
				Match(T__22);
				State = 144;
				expression(0);
				}
				break;
			case 3:
				_localctx = new GreaterThanContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 146;
				expression(0);
				State = 147;
				Match(T__23);
				State = 148;
				expression(0);
				}
				break;
			case 4:
				_localctx = new LessThanContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 150;
				expression(0);
				State = 151;
				Match(T__24);
				State = 152;
				expression(0);
				}
				break;
			case 5:
				_localctx = new GreaterThanOrEqualContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 154;
				expression(0);
				State = 155;
				Match(T__25);
				State = 156;
				expression(0);
				}
				break;
			case 6:
				_localctx = new LessThanOrEqualContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 158;
				expression(0);
				State = 159;
				Match(T__26);
				State = 160;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 16: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,33,165,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,1,0,1,0,1,0,1,0,5,0,41,8,0,10,0,12,0,44,
		9,0,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,61,
		8,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,
		8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,12,
		1,12,1,12,1,12,1,12,5,12,99,8,12,10,12,12,12,102,9,12,1,13,1,13,1,14,1,
		14,1,14,3,14,109,8,14,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,
		120,8,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,5,
		16,134,8,16,10,16,12,16,137,9,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
		17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
		17,1,17,1,17,3,17,163,8,17,1,17,0,1,32,18,0,2,4,6,8,10,12,14,16,18,20,
		22,24,26,28,30,32,34,0,1,1,0,14,15,171,0,42,1,0,0,0,2,45,1,0,0,0,4,48,
		1,0,0,0,6,60,1,0,0,0,8,62,1,0,0,0,10,64,1,0,0,0,12,71,1,0,0,0,14,74,1,
		0,0,0,16,77,1,0,0,0,18,82,1,0,0,0,20,85,1,0,0,0,22,90,1,0,0,0,24,93,1,
		0,0,0,26,103,1,0,0,0,28,108,1,0,0,0,30,110,1,0,0,0,32,119,1,0,0,0,34,162,
		1,0,0,0,36,37,3,2,1,0,37,38,5,33,0,0,38,41,1,0,0,0,39,41,5,33,0,0,40,36,
		1,0,0,0,40,39,1,0,0,0,41,44,1,0,0,0,42,40,1,0,0,0,42,43,1,0,0,0,43,1,1,
		0,0,0,44,42,1,0,0,0,45,46,3,4,2,0,46,47,3,6,3,0,47,3,1,0,0,0,48,49,5,31,
		0,0,49,5,1,0,0,0,50,61,3,8,4,0,51,61,3,10,5,0,52,61,3,12,6,0,53,61,3,14,
		7,0,54,61,3,16,8,0,55,61,3,18,9,0,56,61,3,20,10,0,57,61,3,22,11,0,58,61,
		3,24,12,0,59,61,3,26,13,0,60,50,1,0,0,0,60,51,1,0,0,0,60,52,1,0,0,0,60,
		53,1,0,0,0,60,54,1,0,0,0,60,55,1,0,0,0,60,56,1,0,0,0,60,57,1,0,0,0,60,
		58,1,0,0,0,60,59,1,0,0,0,61,7,1,0,0,0,62,63,5,1,0,0,63,9,1,0,0,0,64,65,
		5,2,0,0,65,66,5,28,0,0,66,67,5,3,0,0,67,68,5,31,0,0,68,69,5,4,0,0,69,70,
		5,31,0,0,70,11,1,0,0,0,71,72,5,5,0,0,72,73,5,31,0,0,73,13,1,0,0,0,74,75,
		5,6,0,0,75,76,5,31,0,0,76,15,1,0,0,0,77,78,5,7,0,0,78,79,3,34,17,0,79,
		80,5,8,0,0,80,81,5,31,0,0,81,17,1,0,0,0,82,83,5,9,0,0,83,84,5,28,0,0,84,
		19,1,0,0,0,85,86,5,10,0,0,86,87,5,28,0,0,87,88,5,3,0,0,88,89,3,32,16,0,
		89,21,1,0,0,0,90,91,5,11,0,0,91,92,5,28,0,0,92,23,1,0,0,0,93,94,5,12,0,
		0,94,100,3,28,14,0,95,96,3,30,15,0,96,97,3,28,14,0,97,99,1,0,0,0,98,95,
		1,0,0,0,99,102,1,0,0,0,100,98,1,0,0,0,100,101,1,0,0,0,101,25,1,0,0,0,102,
		100,1,0,0,0,103,104,5,13,0,0,104,27,1,0,0,0,105,109,5,29,0,0,106,109,3,
		32,16,0,107,109,5,28,0,0,108,105,1,0,0,0,108,106,1,0,0,0,108,107,1,0,0,
		0,109,29,1,0,0,0,110,111,7,0,0,0,111,31,1,0,0,0,112,113,6,16,-1,0,113,
		120,5,31,0,0,114,120,5,28,0,0,115,116,5,20,0,0,116,117,3,32,16,0,117,118,
		5,21,0,0,118,120,1,0,0,0,119,112,1,0,0,0,119,114,1,0,0,0,119,115,1,0,0,
		0,120,135,1,0,0,0,121,122,10,5,0,0,122,123,5,16,0,0,123,134,3,32,16,6,
		124,125,10,4,0,0,125,126,5,17,0,0,126,134,3,32,16,5,127,128,10,3,0,0,128,
		129,5,18,0,0,129,134,3,32,16,4,130,131,10,2,0,0,131,132,5,19,0,0,132,134,
		3,32,16,3,133,121,1,0,0,0,133,124,1,0,0,0,133,127,1,0,0,0,133,130,1,0,
		0,0,134,137,1,0,0,0,135,133,1,0,0,0,135,136,1,0,0,0,136,33,1,0,0,0,137,
		135,1,0,0,0,138,139,3,32,16,0,139,140,5,22,0,0,140,141,3,32,16,0,141,163,
		1,0,0,0,142,143,3,32,16,0,143,144,5,23,0,0,144,145,3,32,16,0,145,163,1,
		0,0,0,146,147,3,32,16,0,147,148,5,24,0,0,148,149,3,32,16,0,149,163,1,0,
		0,0,150,151,3,32,16,0,151,152,5,25,0,0,152,153,3,32,16,0,153,163,1,0,0,
		0,154,155,3,32,16,0,155,156,5,26,0,0,156,157,3,32,16,0,157,163,1,0,0,0,
		158,159,3,32,16,0,159,160,5,27,0,0,160,161,3,32,16,0,161,163,1,0,0,0,162,
		138,1,0,0,0,162,142,1,0,0,0,162,146,1,0,0,0,162,150,1,0,0,0,162,154,1,
		0,0,0,162,158,1,0,0,0,163,35,1,0,0,0,9,40,42,60,100,108,119,133,135,162
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Blinkenlights.Basic.Gen
