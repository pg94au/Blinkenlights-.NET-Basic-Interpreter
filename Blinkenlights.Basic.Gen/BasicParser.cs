//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ../antlr/Basic.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Blinkenlights.Basic.Gen {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class BasicParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, VARNAME=28, QUOTED_STRING=29, STRING=30, 
		INT=31, WS=32, NEWLINE=33;
	public const int
		RULE_program = 0, RULE_line = 1, RULE_lineNum = 2, RULE_statement = 3, 
		RULE_endStatement = 4, RULE_forStatement = 5, RULE_gosubStatement = 6, 
		RULE_gotoStatement = 7, RULE_ifStatement = 8, RULE_inputStatement = 9, 
		RULE_letStatement = 10, RULE_nextStatement = 11, RULE_printStatement = 12, 
		RULE_returnStatement = 13, RULE_arg = 14, RULE_argSeparator = 15, RULE_expression = 16, 
		RULE_equation = 17;
	public static readonly string[] ruleNames = {
		"program", "line", "lineNum", "statement", "endStatement", "forStatement", 
		"gosubStatement", "gotoStatement", "ifStatement", "inputStatement", "letStatement", 
		"nextStatement", "printStatement", "returnStatement", "arg", "argSeparator", 
		"expression", "equation"
	};

	private static readonly string[] _LiteralNames = {
		null, "'END'", "'FOR'", "'='", "'TO'", "'GOSUB'", "'GOTO'", "'IF'", "'THEN'", 
		"'INPUT'", "'LET'", "'NEXT'", "'PRINT'", "'RETURN'", "','", "';'", "'*'", 
		"'/'", "'+'", "'-'", "'('", "')'", "'=='", "'!='", "'>'", "'<'", "'>='", 
		"'<='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "VARNAME", "QUOTED_STRING", "STRING", "INT", "WS", 
		"NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Basic.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static BasicParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BasicParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BasicParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(BasicParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(BasicParser.NEWLINE, i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==INT || _la==NEWLINE) {
				{
				State = 40;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INT:
					{
					State = 36; line();
					State = 37; Match(NEWLINE);
					}
					break;
				case NEWLINE:
					{
					State = 39; Match(NEWLINE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 44;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public LineNumContext lineNum() {
			return GetRuleContext<LineNumContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45; lineNum();
			State = 46; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineNumContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(BasicParser.INT, 0); }
		public LineNumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineNum; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterLineNum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitLineNum(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineNum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineNumContext lineNum() {
		LineNumContext _localctx = new LineNumContext(Context, State);
		EnterRule(_localctx, 4, RULE_lineNum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public EndStatementContext endStatement() {
			return GetRuleContext<EndStatementContext>(0);
		}
		public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public GosubStatementContext gosubStatement() {
			return GetRuleContext<GosubStatementContext>(0);
		}
		public GotoStatementContext gotoStatement() {
			return GetRuleContext<GotoStatementContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public InputStatementContext inputStatement() {
			return GetRuleContext<InputStatementContext>(0);
		}
		public LetStatementContext letStatement() {
			return GetRuleContext<LetStatementContext>(0);
		}
		public NextStatementContext nextStatement() {
			return GetRuleContext<NextStatementContext>(0);
		}
		public PrintStatementContext printStatement() {
			return GetRuleContext<PrintStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			State = 60;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 50; endStatement();
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 51; forStatement();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 3);
				{
				State = 52; gosubStatement();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 4);
				{
				State = 53; gotoStatement();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 5);
				{
				State = 54; ifStatement();
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 6);
				{
				State = 55; inputStatement();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 7);
				{
				State = 56; letStatement();
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 8);
				{
				State = 57; nextStatement();
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 9);
				{
				State = 58; printStatement();
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 10);
				{
				State = 59; returnStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndStatementContext : ParserRuleContext {
		public EndStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterEndStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitEndStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndStatementContext endStatement() {
		EndStatementContext _localctx = new EndStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_endStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public ITerminalNode VARNAME() { return GetToken(BasicParser.VARNAME, 0); }
		public ITerminalNode[] INT() { return GetTokens(BasicParser.INT); }
		public ITerminalNode INT(int i) {
			return GetToken(BasicParser.INT, i);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64; Match(T__1);
			State = 65; Match(VARNAME);
			State = 66; Match(T__2);
			State = 67; Match(INT);
			State = 68; Match(T__3);
			State = 69; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GosubStatementContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(BasicParser.INT, 0); }
		public GosubStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gosubStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterGosubStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitGosubStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGosubStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GosubStatementContext gosubStatement() {
		GosubStatementContext _localctx = new GosubStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_gosubStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71; Match(T__4);
			State = 72; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoStatementContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(BasicParser.INT, 0); }
		public GotoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotoStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterGotoStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitGotoStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GotoStatementContext gotoStatement() {
		GotoStatementContext _localctx = new GotoStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_gotoStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; Match(T__5);
			State = 75; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public EquationContext equation() {
			return GetRuleContext<EquationContext>(0);
		}
		public ITerminalNode INT() { return GetToken(BasicParser.INT, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77; Match(T__6);
			State = 78; equation();
			State = 79; Match(T__7);
			State = 80; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputStatementContext : ParserRuleContext {
		public ITerminalNode VARNAME() { return GetToken(BasicParser.VARNAME, 0); }
		public InputStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterInputStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitInputStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputStatementContext inputStatement() {
		InputStatementContext _localctx = new InputStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_inputStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82; Match(T__8);
			State = 83; Match(VARNAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetStatementContext : ParserRuleContext {
		public ITerminalNode VARNAME() { return GetToken(BasicParser.VARNAME, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LetStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterLetStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitLetStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetStatementContext letStatement() {
		LetStatementContext _localctx = new LetStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_letStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85; Match(T__9);
			State = 86; Match(VARNAME);
			State = 87; Match(T__2);
			State = 88; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NextStatementContext : ParserRuleContext {
		public ITerminalNode VARNAME() { return GetToken(BasicParser.VARNAME, 0); }
		public NextStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nextStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterNextStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitNextStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNextStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NextStatementContext nextStatement() {
		NextStatementContext _localctx = new NextStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_nextStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90; Match(T__10);
			State = 91; Match(VARNAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStatementContext : ParserRuleContext {
		public ArgContext[] arg() {
			return GetRuleContexts<ArgContext>();
		}
		public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		public ArgSeparatorContext[] argSeparator() {
			return GetRuleContexts<ArgSeparatorContext>();
		}
		public ArgSeparatorContext argSeparator(int i) {
			return GetRuleContext<ArgSeparatorContext>(i);
		}
		public PrintStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterPrintStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitPrintStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStatementContext printStatement() {
		PrintStatementContext _localctx = new PrintStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_printStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93; Match(T__11);
			State = 94; arg();
			State = 100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__13 || _la==T__14) {
				{
				{
				State = 95; argSeparator();
				State = 96; arg();
				}
				}
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103; Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
	 
		public ArgContext() { }
		public virtual void CopyFrom(ArgContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrintVariableContext : ArgContext {
		public ITerminalNode VARNAME() { return GetToken(BasicParser.VARNAME, 0); }
		public PrintVariableContext(ArgContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterPrintVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitPrintVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrintQuotedStringContext : ArgContext {
		public ITerminalNode QUOTED_STRING() { return GetToken(BasicParser.QUOTED_STRING, 0); }
		public PrintQuotedStringContext(ArgContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterPrintQuotedString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitPrintQuotedString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintQuotedString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrintExpressionContext : ArgContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrintExpressionContext(ArgContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterPrintExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitPrintExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(Context, State);
		EnterRule(_localctx, 28, RULE_arg);
		try {
			State = 108;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new PrintQuotedStringContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 105; Match(QUOTED_STRING);
				}
				break;
			case 2:
				_localctx = new PrintExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 106; expression(0);
				}
				break;
			case 3:
				_localctx = new PrintVariableContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 107; Match(VARNAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgSeparatorContext : ParserRuleContext {
		public ArgSeparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argSeparator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterArgSeparator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitArgSeparator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgSeparator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgSeparatorContext argSeparator() {
		ArgSeparatorContext _localctx = new ArgSeparatorContext(Context, State);
		EnterRule(_localctx, 30, RULE_argSeparator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__14) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DivisionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DivisionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterDivision(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitDivision(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivision(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesesContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesesContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterParentheses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitParentheses(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParentheses(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableContext : ExpressionContext {
		public ITerminalNode VARNAME() { return GetToken(BasicParser.VARNAME, 0); }
		public VariableContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubtractionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SubtractionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterSubtraction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitSubtraction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtraction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicationContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplicationContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterMultiplication(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitMultiplication(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueContext : ExpressionContext {
		public ITerminalNode INT() { return GetToken(BasicParser.INT, 0); }
		public ValueContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AdditionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterAddition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitAddition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 32;
		EnterRecursionRule(_localctx, 32, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				{
				_localctx = new ValueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 113; Match(INT);
				}
				break;
			case VARNAME:
				{
				_localctx = new VariableContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 114; Match(VARNAME);
				}
				break;
			case T__19:
				{
				_localctx = new ParenthesesContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 115; Match(T__19);
				State = 116; expression(0);
				State = 117; Match(T__20);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 135;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 133;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						_localctx = new MultiplicationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 121;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 122; Match(T__15);
						State = 123; expression(6);
						}
						break;
					case 2:
						{
						_localctx = new DivisionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 124;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 125; Match(T__16);
						State = 126; expression(5);
						}
						break;
					case 3:
						{
						_localctx = new AdditionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 127;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 128; Match(T__17);
						State = 129; expression(4);
						}
						break;
					case 4:
						{
						_localctx = new SubtractionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 130;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 131; Match(T__18);
						State = 132; expression(3);
						}
						break;
					}
					} 
				}
				State = 137;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EquationContext : ParserRuleContext {
		public EquationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equation; } }
	 
		public EquationContext() { }
		public virtual void CopyFrom(EquationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DoesNotEqualContext : EquationContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DoesNotEqualContext(EquationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterDoesNotEqual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitDoesNotEqual(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoesNotEqual(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualsContext : EquationContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EqualsContext(EquationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterEquals(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitEquals(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquals(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LessThanContext : EquationContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LessThanContext(EquationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterLessThan(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitLessThan(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessThan(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LessThanOrEqualContext : EquationContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LessThanOrEqualContext(EquationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterLessThanOrEqual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitLessThanOrEqual(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessThanOrEqual(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterThanContext : EquationContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public GreaterThanContext(EquationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterGreaterThan(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitGreaterThan(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterThan(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterThanOrEqualContext : EquationContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public GreaterThanOrEqualContext(EquationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterGreaterThanOrEqual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitGreaterThanOrEqual(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterThanOrEqual(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EquationContext equation() {
		EquationContext _localctx = new EquationContext(Context, State);
		EnterRule(_localctx, 34, RULE_equation);
		try {
			State = 162;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				_localctx = new EqualsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 138; expression(0);
				State = 139; Match(T__21);
				State = 140; expression(0);
				}
				break;
			case 2:
				_localctx = new DoesNotEqualContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 142; expression(0);
				State = 143; Match(T__22);
				State = 144; expression(0);
				}
				break;
			case 3:
				_localctx = new GreaterThanContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 146; expression(0);
				State = 147; Match(T__23);
				State = 148; expression(0);
				}
				break;
			case 4:
				_localctx = new LessThanContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 150; expression(0);
				State = 151; Match(T__24);
				State = 152; expression(0);
				}
				break;
			case 5:
				_localctx = new GreaterThanOrEqualContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 154; expression(0);
				State = 155; Match(T__25);
				State = 156; expression(0);
				}
				break;
			case 6:
				_localctx = new LessThanOrEqualContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 158; expression(0);
				State = 159; Match(T__26);
				State = 160; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 16: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '#', '\xA7', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', 
		'\x2', '+', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '.', '\v', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', '?', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\a', '\xE', '\x65', '\n', '\xE', '\f', '\xE', '\xE', '\xE', 'h', '\v', 
		'\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x5', '\x10', 'o', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x5', '\x12', 'z', '\n', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\a', '\x12', '\x88', '\n', '\x12', '\f', '\x12', 
		'\xE', '\x12', '\x8B', '\v', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x5', '\x13', '\xA5', '\n', '\x13', '\x3', '\x13', 
		'\x2', '\x3', '\"', '\x14', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', 
		'$', '\x2', '\x3', '\x3', '\x2', '\x10', '\x11', '\x2', '\xAD', '\x2', 
		',', '\x3', '\x2', '\x2', '\x2', '\x4', '/', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\x32', '\x3', '\x2', '\x2', '\x2', '\b', '>', '\x3', '\x2', '\x2', 
		'\x2', '\n', '@', '\x3', '\x2', '\x2', '\x2', '\f', '\x42', '\x3', '\x2', 
		'\x2', '\x2', '\xE', 'I', '\x3', '\x2', '\x2', '\x2', '\x10', 'L', '\x3', 
		'\x2', '\x2', '\x2', '\x12', 'O', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'T', '\x3', '\x2', '\x2', '\x2', '\x16', 'W', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\\', '\x3', '\x2', '\x2', '\x2', '\x1A', '_', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', 'i', '\x3', '\x2', '\x2', '\x2', '\x1E', 'n', '\x3', '\x2', 
		'\x2', '\x2', ' ', 'p', '\x3', '\x2', '\x2', '\x2', '\"', 'y', '\x3', 
		'\x2', '\x2', '\x2', '$', '\xA4', '\x3', '\x2', '\x2', '\x2', '&', '\'', 
		'\x5', '\x4', '\x3', '\x2', '\'', '(', '\a', '#', '\x2', '\x2', '(', '+', 
		'\x3', '\x2', '\x2', '\x2', ')', '+', '\a', '#', '\x2', '\x2', '*', '&', 
		'\x3', '\x2', '\x2', '\x2', '*', ')', '\x3', '\x2', '\x2', '\x2', '+', 
		'.', '\x3', '\x2', '\x2', '\x2', ',', '*', '\x3', '\x2', '\x2', '\x2', 
		',', '-', '\x3', '\x2', '\x2', '\x2', '-', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '.', ',', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\x5', '\x6', 
		'\x4', '\x2', '\x30', '\x31', '\x5', '\b', '\x5', '\x2', '\x31', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\a', '!', '\x2', '\x2', '\x33', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x34', '?', '\x5', '\n', '\x6', '\x2', 
		'\x35', '?', '\x5', '\f', '\a', '\x2', '\x36', '?', '\x5', '\xE', '\b', 
		'\x2', '\x37', '?', '\x5', '\x10', '\t', '\x2', '\x38', '?', '\x5', '\x12', 
		'\n', '\x2', '\x39', '?', '\x5', '\x14', '\v', '\x2', ':', '?', '\x5', 
		'\x16', '\f', '\x2', ';', '?', '\x5', '\x18', '\r', '\x2', '<', '?', '\x5', 
		'\x1A', '\xE', '\x2', '=', '?', '\x5', '\x1C', '\xF', '\x2', '>', '\x34', 
		'\x3', '\x2', '\x2', '\x2', '>', '\x35', '\x3', '\x2', '\x2', '\x2', '>', 
		'\x36', '\x3', '\x2', '\x2', '\x2', '>', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '>', '\x38', '\x3', '\x2', '\x2', '\x2', '>', '\x39', '\x3', '\x2', 
		'\x2', '\x2', '>', ':', '\x3', '\x2', '\x2', '\x2', '>', ';', '\x3', '\x2', 
		'\x2', '\x2', '>', '<', '\x3', '\x2', '\x2', '\x2', '>', '=', '\x3', '\x2', 
		'\x2', '\x2', '?', '\t', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\a', 
		'\x3', '\x2', '\x2', '\x41', '\v', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'\x43', '\a', '\x4', '\x2', '\x2', '\x43', '\x44', '\a', '\x1E', '\x2', 
		'\x2', '\x44', '\x45', '\a', '\x5', '\x2', '\x2', '\x45', '\x46', '\a', 
		'!', '\x2', '\x2', '\x46', 'G', '\a', '\x6', '\x2', '\x2', 'G', 'H', '\a', 
		'!', '\x2', '\x2', 'H', '\r', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\a', 
		'\a', '\x2', '\x2', 'J', 'K', '\a', '!', '\x2', '\x2', 'K', '\xF', '\x3', 
		'\x2', '\x2', '\x2', 'L', 'M', '\a', '\b', '\x2', '\x2', 'M', 'N', '\a', 
		'!', '\x2', '\x2', 'N', '\x11', '\x3', '\x2', '\x2', '\x2', 'O', 'P', 
		'\a', '\t', '\x2', '\x2', 'P', 'Q', '\x5', '$', '\x13', '\x2', 'Q', 'R', 
		'\a', '\n', '\x2', '\x2', 'R', 'S', '\a', '!', '\x2', '\x2', 'S', '\x13', 
		'\x3', '\x2', '\x2', '\x2', 'T', 'U', '\a', '\v', '\x2', '\x2', 'U', 'V', 
		'\a', '\x1E', '\x2', '\x2', 'V', '\x15', '\x3', '\x2', '\x2', '\x2', 'W', 
		'X', '\a', '\f', '\x2', '\x2', 'X', 'Y', '\a', '\x1E', '\x2', '\x2', 'Y', 
		'Z', '\a', '\x5', '\x2', '\x2', 'Z', '[', '\x5', '\"', '\x12', '\x2', 
		'[', '\x17', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\a', '\r', '\x2', 
		'\x2', ']', '^', '\a', '\x1E', '\x2', '\x2', '^', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '_', '`', '\a', '\xE', '\x2', '\x2', '`', '\x66', '\x5', 
		'\x1E', '\x10', '\x2', '\x61', '\x62', '\x5', ' ', '\x11', '\x2', '\x62', 
		'\x63', '\x5', '\x1E', '\x10', '\x2', '\x63', '\x65', '\x3', '\x2', '\x2', 
		'\x2', '\x64', '\x61', '\x3', '\x2', '\x2', '\x2', '\x65', 'h', '\x3', 
		'\x2', '\x2', '\x2', '\x66', '\x64', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'g', '\x3', '\x2', '\x2', '\x2', 'g', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'h', '\x66', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\a', '\xF', '\x2', 
		'\x2', 'j', '\x1D', '\x3', '\x2', '\x2', '\x2', 'k', 'o', '\a', '\x1F', 
		'\x2', '\x2', 'l', 'o', '\x5', '\"', '\x12', '\x2', 'm', 'o', '\a', '\x1E', 
		'\x2', '\x2', 'n', 'k', '\x3', '\x2', '\x2', '\x2', 'n', 'l', '\x3', '\x2', 
		'\x2', '\x2', 'n', 'm', '\x3', '\x2', '\x2', '\x2', 'o', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', 'p', 'q', '\t', '\x2', '\x2', '\x2', 'q', '!', '\x3', 
		'\x2', '\x2', '\x2', 'r', 's', '\b', '\x12', '\x1', '\x2', 's', 'z', '\a', 
		'!', '\x2', '\x2', 't', 'z', '\a', '\x1E', '\x2', '\x2', 'u', 'v', '\a', 
		'\x16', '\x2', '\x2', 'v', 'w', '\x5', '\"', '\x12', '\x2', 'w', 'x', 
		'\a', '\x17', '\x2', '\x2', 'x', 'z', '\x3', '\x2', '\x2', '\x2', 'y', 
		'r', '\x3', '\x2', '\x2', '\x2', 'y', 't', '\x3', '\x2', '\x2', '\x2', 
		'y', 'u', '\x3', '\x2', '\x2', '\x2', 'z', '\x89', '\x3', '\x2', '\x2', 
		'\x2', '{', '|', '\f', '\a', '\x2', '\x2', '|', '}', '\a', '\x12', '\x2', 
		'\x2', '}', '\x88', '\x5', '\"', '\x12', '\b', '~', '\x7F', '\f', '\x6', 
		'\x2', '\x2', '\x7F', '\x80', '\a', '\x13', '\x2', '\x2', '\x80', '\x88', 
		'\x5', '\"', '\x12', '\a', '\x81', '\x82', '\f', '\x5', '\x2', '\x2', 
		'\x82', '\x83', '\a', '\x14', '\x2', '\x2', '\x83', '\x88', '\x5', '\"', 
		'\x12', '\x6', '\x84', '\x85', '\f', '\x4', '\x2', '\x2', '\x85', '\x86', 
		'\a', '\x15', '\x2', '\x2', '\x86', '\x88', '\x5', '\"', '\x12', '\x5', 
		'\x87', '{', '\x3', '\x2', '\x2', '\x2', '\x87', '~', '\x3', '\x2', '\x2', 
		'\x2', '\x87', '\x81', '\x3', '\x2', '\x2', '\x2', '\x87', '\x84', '\x3', 
		'\x2', '\x2', '\x2', '\x88', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x89', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8A', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '#', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x89', '\x3', 
		'\x2', '\x2', '\x2', '\x8C', '\x8D', '\x5', '\"', '\x12', '\x2', '\x8D', 
		'\x8E', '\a', '\x18', '\x2', '\x2', '\x8E', '\x8F', '\x5', '\"', '\x12', 
		'\x2', '\x8F', '\xA5', '\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\x5', 
		'\"', '\x12', '\x2', '\x91', '\x92', '\a', '\x19', '\x2', '\x2', '\x92', 
		'\x93', '\x5', '\"', '\x12', '\x2', '\x93', '\xA5', '\x3', '\x2', '\x2', 
		'\x2', '\x94', '\x95', '\x5', '\"', '\x12', '\x2', '\x95', '\x96', '\a', 
		'\x1A', '\x2', '\x2', '\x96', '\x97', '\x5', '\"', '\x12', '\x2', '\x97', 
		'\xA5', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\x5', '\"', '\x12', 
		'\x2', '\x99', '\x9A', '\a', '\x1B', '\x2', '\x2', '\x9A', '\x9B', '\x5', 
		'\"', '\x12', '\x2', '\x9B', '\xA5', '\x3', '\x2', '\x2', '\x2', '\x9C', 
		'\x9D', '\x5', '\"', '\x12', '\x2', '\x9D', '\x9E', '\a', '\x1C', '\x2', 
		'\x2', '\x9E', '\x9F', '\x5', '\"', '\x12', '\x2', '\x9F', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '\xA0', '\xA1', '\x5', '\"', '\x12', '\x2', '\xA1', 
		'\xA2', '\a', '\x1D', '\x2', '\x2', '\xA2', '\xA3', '\x5', '\"', '\x12', 
		'\x2', '\xA3', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA4', '\x8C', '\x3', 
		'\x2', '\x2', '\x2', '\xA4', '\x90', '\x3', '\x2', '\x2', '\x2', '\xA4', 
		'\x94', '\x3', '\x2', '\x2', '\x2', '\xA4', '\x98', '\x3', '\x2', '\x2', 
		'\x2', '\xA4', '\x9C', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA0', '\x3', 
		'\x2', '\x2', '\x2', '\xA5', '%', '\x3', '\x2', '\x2', '\x2', '\v', '*', 
		',', '>', '\x66', 'n', 'y', '\x87', '\x89', '\xA4',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Blinkenlights.Basic.Gen
