//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ../antlr/Basic.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Blinkenlights.Basic.Gen {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class BasicLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, VARNAME=28, QUOTED_STRING=29, STRING=30, 
		INT=31, WS=32, NEWLINE=33;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"T__25", "T__26", "VARNAME", "QUOTED_STRING", "STRING", "INT", "WS", "NEWLINE"
	};


	public BasicLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public BasicLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'END'", "'FOR'", "'='", "'TO'", "'GOSUB'", "'GOTO'", "'IF'", "'THEN'", 
		"'INPUT'", "'LET'", "'NEXT'", "'PRINT'", "'RETURN'", "','", "';'", "'*'", 
		"'/'", "'+'", "'-'", "'('", "')'", "'=='", "'!='", "'>'", "'<'", "'>='", 
		"'<='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "VARNAME", "QUOTED_STRING", "STRING", "INT", "WS", 
		"NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Basic.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BasicLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,33,202,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,1,0,1,0,1,0,1,0,1,1,1,1,1,
		1,1,1,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,
		1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,
		9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,
		1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,
		1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,
		1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,5,27,162,8,27,10,27,
		12,27,165,9,27,1,28,1,28,1,28,1,28,5,28,171,8,28,10,28,12,28,174,9,28,
		1,28,1,28,1,29,4,29,179,8,29,11,29,12,29,180,1,30,3,30,184,8,30,1,30,4,
		30,187,8,30,11,30,12,30,188,1,31,4,31,192,8,31,11,31,12,31,193,1,31,1,
		31,1,32,3,32,199,8,32,1,32,1,32,1,172,0,33,1,1,3,2,5,3,7,4,9,5,11,6,13,
		7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,
		39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
		63,32,65,33,1,0,4,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,
		57,2,0,9,9,32,32,209,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,
		9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,
		0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,
		31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
		0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,
		0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
		1,0,0,0,0,65,1,0,0,0,1,67,1,0,0,0,3,71,1,0,0,0,5,75,1,0,0,0,7,77,1,0,0,
		0,9,80,1,0,0,0,11,86,1,0,0,0,13,91,1,0,0,0,15,94,1,0,0,0,17,99,1,0,0,0,
		19,105,1,0,0,0,21,109,1,0,0,0,23,114,1,0,0,0,25,120,1,0,0,0,27,127,1,0,
		0,0,29,129,1,0,0,0,31,131,1,0,0,0,33,133,1,0,0,0,35,135,1,0,0,0,37,137,
		1,0,0,0,39,139,1,0,0,0,41,141,1,0,0,0,43,143,1,0,0,0,45,146,1,0,0,0,47,
		149,1,0,0,0,49,151,1,0,0,0,51,153,1,0,0,0,53,156,1,0,0,0,55,159,1,0,0,
		0,57,166,1,0,0,0,59,178,1,0,0,0,61,183,1,0,0,0,63,191,1,0,0,0,65,198,1,
		0,0,0,67,68,5,69,0,0,68,69,5,78,0,0,69,70,5,68,0,0,70,2,1,0,0,0,71,72,
		5,70,0,0,72,73,5,79,0,0,73,74,5,82,0,0,74,4,1,0,0,0,75,76,5,61,0,0,76,
		6,1,0,0,0,77,78,5,84,0,0,78,79,5,79,0,0,79,8,1,0,0,0,80,81,5,71,0,0,81,
		82,5,79,0,0,82,83,5,83,0,0,83,84,5,85,0,0,84,85,5,66,0,0,85,10,1,0,0,0,
		86,87,5,71,0,0,87,88,5,79,0,0,88,89,5,84,0,0,89,90,5,79,0,0,90,12,1,0,
		0,0,91,92,5,73,0,0,92,93,5,70,0,0,93,14,1,0,0,0,94,95,5,84,0,0,95,96,5,
		72,0,0,96,97,5,69,0,0,97,98,5,78,0,0,98,16,1,0,0,0,99,100,5,73,0,0,100,
		101,5,78,0,0,101,102,5,80,0,0,102,103,5,85,0,0,103,104,5,84,0,0,104,18,
		1,0,0,0,105,106,5,76,0,0,106,107,5,69,0,0,107,108,5,84,0,0,108,20,1,0,
		0,0,109,110,5,78,0,0,110,111,5,69,0,0,111,112,5,88,0,0,112,113,5,84,0,
		0,113,22,1,0,0,0,114,115,5,80,0,0,115,116,5,82,0,0,116,117,5,73,0,0,117,
		118,5,78,0,0,118,119,5,84,0,0,119,24,1,0,0,0,120,121,5,82,0,0,121,122,
		5,69,0,0,122,123,5,84,0,0,123,124,5,85,0,0,124,125,5,82,0,0,125,126,5,
		78,0,0,126,26,1,0,0,0,127,128,5,44,0,0,128,28,1,0,0,0,129,130,5,59,0,0,
		130,30,1,0,0,0,131,132,5,42,0,0,132,32,1,0,0,0,133,134,5,47,0,0,134,34,
		1,0,0,0,135,136,5,43,0,0,136,36,1,0,0,0,137,138,5,45,0,0,138,38,1,0,0,
		0,139,140,5,40,0,0,140,40,1,0,0,0,141,142,5,41,0,0,142,42,1,0,0,0,143,
		144,5,61,0,0,144,145,5,61,0,0,145,44,1,0,0,0,146,147,5,33,0,0,147,148,
		5,61,0,0,148,46,1,0,0,0,149,150,5,62,0,0,150,48,1,0,0,0,151,152,5,60,0,
		0,152,50,1,0,0,0,153,154,5,62,0,0,154,155,5,61,0,0,155,52,1,0,0,0,156,
		157,5,60,0,0,157,158,5,61,0,0,158,54,1,0,0,0,159,163,7,0,0,0,160,162,7,
		1,0,0,161,160,1,0,0,0,162,165,1,0,0,0,163,161,1,0,0,0,163,164,1,0,0,0,
		164,56,1,0,0,0,165,163,1,0,0,0,166,172,5,34,0,0,167,168,5,92,0,0,168,171,
		5,34,0,0,169,171,9,0,0,0,170,167,1,0,0,0,170,169,1,0,0,0,171,174,1,0,0,
		0,172,173,1,0,0,0,172,170,1,0,0,0,173,175,1,0,0,0,174,172,1,0,0,0,175,
		176,5,34,0,0,176,58,1,0,0,0,177,179,7,0,0,0,178,177,1,0,0,0,179,180,1,
		0,0,0,180,178,1,0,0,0,180,181,1,0,0,0,181,60,1,0,0,0,182,184,5,45,0,0,
		183,182,1,0,0,0,183,184,1,0,0,0,184,186,1,0,0,0,185,187,7,2,0,0,186,185,
		1,0,0,0,187,188,1,0,0,0,188,186,1,0,0,0,188,189,1,0,0,0,189,62,1,0,0,0,
		190,192,7,3,0,0,191,190,1,0,0,0,192,193,1,0,0,0,193,191,1,0,0,0,193,194,
		1,0,0,0,194,195,1,0,0,0,195,196,6,31,0,0,196,64,1,0,0,0,197,199,5,13,0,
		0,198,197,1,0,0,0,198,199,1,0,0,0,199,200,1,0,0,0,200,201,5,10,0,0,201,
		66,1,0,0,0,9,0,163,170,172,180,183,188,193,198,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Blinkenlights.Basic.Gen
